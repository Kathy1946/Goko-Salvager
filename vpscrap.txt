
    var vpoint = {
        'Estate': function () {return 1; },
        'Colony': function () {return 10; },
        'Duchy': function () {return 3; },
        'Duke': function (d) {return d.Duchy || 0; },
        'Fairgrounds': function (d) {
            var c, s = 0;
            for (c in d) {
                s += 1;
            }
            return 2 * Math.floor(s / 5);
        },
        'Farmland': function () {return 2; },
        'Feodum': function (d) {return Math.floor((d.Silver || 0) / 3); },
        'Gardens': function (d) {
            var c, s = 0;
            for (c in d) {
                s += d[c];
            }
            return Math.floor(s / 10);
        },
        'Province': function () {return 6; },
        'Silk Road': function (d) {
            var c, s = 0;
            for (c in d) {
                if (types[c].match(/victory/)) {
                    s += d[c];
                }
            }
            return Math.floor(s / 4);
        },
        'Vineyard': function (d) {
            var c, s = 0;
            for (c in d) {
                if (types[c].match(/\baction/)) {
                    s += d[c];
                }
            }
            return Math.floor(s / 3);
        },
        //'Overgrown Estate': function () {return 0},
        'Dame Josephine': function () {return 2; },
        'Great Hall': function () {return 1; },
        'Nobles': function () {return 2; },
        'Island': function () {return 2; },
        'Harem': function () {return 2; },
        'Tunnel': function () {return 2; },
        'Curse': function () {return -1; },
    };

    function vp_in_deck(deck) {
        var card, points = 0;
        for (card in deck) {
            if (vpoint[card]) {
                points += deck[card] * vpoint[card](deck);
            }
        }
        return points;
    }

    vp_div = function () {
        if (!vpOn) {
            return '';
        }
        var ret = '<div style="position:absolute;padding:2px;background-color:gray"><table>';
        var p = Object.keys(newLogNames);
        p.sort(function (a, b) {
            var pa = newLogNames[a];
            var pb = newLogNames[b];
            if (playervp[pa] !== playervp[pb]) {
                return playervp[pb] - playervp[pa];
            }
            return pb - pa;
        });
        var i;
        for (i = 0; i < p.length; i += 1) {
            var pn = newLogNames[p[i]];
            ret += '<tr class="p' + pn + '"><td>' + p[i] + '</td><td>' + playervp[pn] + '</td></tr>';
        }
        ret += '</table></div>';
        return ret;
    };

    function vp_txt() {
        var i, ret = [];
        var p = Object.keys(newLogNames);
        for (i = 0; i < p.length; i += 1) {
            ret.push(p[i] + ': ' + playervp[newLogNames[p[i]]]);
        }
        return ret.sort().join(', ');
    }

    var respondToVPToggleChat = function (message, sender) {
        console.log('Chat from ' + sender + ': ' + message);
        //        if (messageData.text === "Dominion Online User Extension enabled (see goo.gl/4muRB)\nType \"#vpon\" before turn 5 to turn on point tracker.\nType \"#vpoff\" before turn 5 to disallow the point tracker.\n"
        //                && gs.get_option('vp_always_off')
        //                && tablename.toUpperCase().indexOf("#VPON") === -1) {
        //            sendVpOff = true;
        //        }

        //        if (gs.get_option('vp_enabled') && messageData.text.toUpperCase() === '#VPOFF' && (vpOn || vpLocked)) {
        //            if (vpLocked) {
        //                msgSend += 'Victory Point tracker setting locked\n';
        //            } else {
        //                msgSend += 'Victory Point tracker disallowed\n';
        //                vpOn = false;
        //                vpLocked = true;
        //            }
        //        } else if (gs.get_option('vp_enabled') && messageData.text.toUpperCase() === '#VPON' && !vpOn) {
        //            if (vpLocked) {
        //                msgSend += 'Victory Point tracker setting locked\n';
        //            } else {
        //                msgSend += 'Victory Point tracker enabled (see http://dom.retrobox.eu/vp.html)\n';
        //                msgSend += 'Type "#vp?" at any time to display the score in the chat\n';
        //                msgSend += 'Type "#vpoff" before turn 5 to disallow the point tracker.\n';
        //                vpOn = true;
        //            }
        //        } else if (gs.get_option('vp_enabled') && messageData.text.toUpperCase() === '#VP?' && vpOn) {
        //            msgSend += 'Current points: ' + vp_txt() + '\n';
        //        }
        //    } else if (messageName === 'gameEvent2' && messageData.code === 'system.startGame') {
        //        if (tablename) {
        //            tablename = tablename.toUpperCase();
        //            msgSend += 'Dominion Online User Extension enabled (see goo.gl/4muRB)\n';
        //            if (gs.get_option('vp_enabled') && tablename.indexOf("#VPON") !== -1) {
        //                msgSend += 'Victory Point tracker enabled and locked (see http://dom.retrobox.eu/vp.html)\n';
        //                msgSend += 'Type "#vp?" at any time to display the score in the chat\n';

        //                vpOn = true;
        //                vpLocked = true;
        //            } else if (gs.get_option('vp_enabled') && tablename.indexOf("#VPOFF") !== -1) {
        //                msgSend += 'Victory Point tracker disallowed and locked (see http://dom.retrobox.eu/vp.html)\n';

        //                vpOn = false;
        //                vpLocked = true;
        //            } else if (gs.get_option('vp_enabled') && gs.get_option('vp_always_on')) {
        //                sendVpOn = true;
        //            } else if (gs.get_option('vp_enabled')) {
        //                msgSend += 'Type "#vpon" before turn 5 to turn on point tracker.\n';
        //                msgSend += 'Type "#vpoff" before turn 5 to disallow the point tracker.\n';
        //            }
        //        }
        //    } else if (messageName === 'addLog' && messageData.text === 'Rating system: adventure' && gs.get_option('adventurevp')) {
        //        console.log("VPON RIGHT");
        //        vpOn = true;
        //    }
        //} catch (e) {
        //    console.log('exception :' + e);
        //}

        //if (msgSend.length > 0) {
        //    this.clientConnection.send('sendChat', {text: msgSend});
        //}

        //if (sendVpOn) {
        //    this.clientConnection.send('sendChat', {text: "#vpon"});
        //} else if (sendVpOff) {
        //    this.clientConnection.send('sendChat', {text: "#vpoff"});
        //}
    };

    // TODO: intercept #vpon and #vpoff chats when (s !== null) <?>
    // TODO: never lock in games without humans
    // TODO: UI displays VP counter if (s === true) or ((s === null) && (any(p)))
    // TODO: how to reliably detect game start?

    // Tests:
    // 1. Set vp_bot_enable
    //    a. start bot game, verify ON
    //       advance to T5
    //       send #vpoff, verify OFF
    //       send #vpon, verify ON
    //    b. repeat 1a for adventure game
    // 2. Set vp_bot_enable = false
    //    a. start bot game, verify OFF
    //       advance to T5
    //       send #vpon, verify ON
    //       send #vpoff, verify OFF
    //    b. repeat 2a for adventure game
    // 3. Set vp_human_disallow
    //    a. start multiplayer game w/o title, verify OFF
    //       send #vpon/#vpoff, verify OFF and no chat sent
    //       recieve #vpon/#vpoff, verify OFF
    //       advance to T5, verify OFF
    //    b. start multiplayer game with #vpoff in title
    //       send #vpon/#vpoff, verify OFF and no chat sent
    //       recieve #vpon/#vpoff, verify OFF
    //       advance to T5, verify OFF
    //    c. start multiplayer game with #vpon in title
    //       send #vpon/#vpoff, verify ON and no chat sent
    //       recieve #vpon/#vpoff, verify ON
    //       advance to T5, verify ON
    // 4. Set vp_human_request
    //    a. start multiplayer game w/o title, verify OFF
    //       advance to T1, verity #vpon sent
    //
    //
    
    // Cases:
    // Bot Mode:
    // - vp_bot_enable true --> ON
    // - send #vpon --> ON
    // - send #vpoff --> OFF
    // - T5 --> no effect
    // Adv Mode: (same as bot mode)
    // Multiplayer Mode:
    // - title #vpon/#vpoff --> ON/OFF
    //   - vp_human_X --> no effect
    //   - send/receive ANY --> no effect
    // - vp_human_disallow --> OFF, send #vpoff
    //   - send/receive any --> no effect
    // - vp_human_request --> ON, send #vpon
    //   - send/receive #vpoff --> OFF
    //     - any --> no effect
    // - T5 lock
    //   - any --> no effect
    // * test order doesn't matter

    var updateVPCounterToggle = function (messageName, messageData, message, dc) {
        var m, tablename = JSON.parse(dc.table.get('settings')).name;
        var botadvGame = (typeof tablename === 'undefined');

        if (['addLog', 'RoomChat', 'gameSetup'].indexOf(messageName) < 0) {
            return;
        }

        console.log('Message Name: ' + messageName);
        console.log(messageData.text);
        console.log(messageData);

        // Booleans:
        //
        // advbot game
        // lastRequest
        // title has #vpon
        // title has #vpoff
        // anyone said #vpoff
        // anyone said #vpon
        //
        // Triggers:
        // vp_bot_enable
        // vp_human_request
        // vp_human_disallow
        // T>5

        // onUpdate():
        // s = s !== null ? s
        //   : advbotGame ? lastRequest
        //   : title has #vpoff ? false
        //   : title has #vpon ? true
        //   : anyone said #vpoff ? false
        //   : null
        //
        // c = s !== null ? s : anyone said #vpon

        // On my T1:
        //   if advbotGame && vp_bot_enable:
        //     send #vpon
        //   else if s === null:
        //     if vp_human_request:
        //       send #vpon
        //     else if vp_human_disallow:
        //       send #vpoff
        // On any T5:
        //   if s === null
        //     s = c

        // Handle bot/adventure games and #vpon/off in title on first message
        if (messageName === 'gameSetup') {
            console.log(1);
            gs.vp = { s: null, p: [], humanCount: 0};

            if (botadvGame) {
                console.log(2);
                gs.vp.s = gs.get_option('vp_bot_enable') || null;
            } else {
                console.log(3);
                gs.vp.s = tablename.match(/#vpoff/i) ? false
                        : (tablename.match(/#vpon/i) ? true : null);
            }

        } else if (messageName === 'addLog') {
            // Get players from the "starting cards" log entries
            console.log(4);

            m = messageData.text.match(/^(.*) - starting cards/);
            if (m) {
                console.log(5);
                if (!(m[1].match(/^Lord Bottington$/) || m[1].match(/^.* Bot$/))) {
                    console.log(6);
                    gs.vp.humanCount += 1;
                }
            }
        }

        if (gs.vp.s === null) {
            console.log(7);

            // Handle #vpon and #vpoff messages
            if (messageName === 'RoomChat') {
                console.log(8);

                // Any player can unilaterally disable and lock VP counter
                if (messageData.text.match(/#vpoff/i)) {
                    console.log(9);
                    gs.vp.s = false;

                } else if (messageData.text.match(/#vpon/i)) {
                    console.log(10);
                    var speaker = window.mtgRoom.playerList.findByAddress(
                        messageData.playerAddress
                    ).get('playerName');
                    if (gs.vp.p.indexof(speaker) < 0) {
                        gs.vp.p.push(speaker);
                    }
                }

            } else if (messageName === 'addLog') {
                console.log(11);

                // Handle bot games and auto-VP options on player's T1
                m = messageData.text.match('-* (.*): turn 1');
                if (m) {
                    console.log(12);
                    console.log('Turn 1');
                    console.log(m);
                }
                if (m && m[1] === window.mtgRoom.localPlayer.get('playerName')) {
                    console.log(13);
                    if (gs.vp.humanCount === 1 && gs.get_option('vp_bot_enable')) {
                        console.log(14);
                        gs.vp.s = true;
                    } else {
                        console.log(15);
                        if (gs.get_option('vp_human_request') && !botadvGame) {
                            console.log(16);
                            dc.clientConnection.send('sendChat', {text: '#vpon'});
                        } else if (gs.get_option('vp_human_disallow') && !botadvGame) {
                            console.log(17);
                            gs.vp.s = false;
                            dc.clientConnection.send('sendChat', {text: '#vpoff'});
                        }
                    }
                }

                // Lock on anyone's T5
                m = messageData.text.match('.*: turn 5');
                if (m) {
                    console.log(18);
                    console.log('Turn 5');
                    gs.vp.s = gs.vp.p.length > 0;
                }
            }
        }
    };

    // Hijack server messages to handle VP counter toggling
    dc.prototype.onIncomingMessage_orig = dc.prototype.onIncomingMessage;
    dc.prototype.onIncomingMessage = function (messageName, messageData, message) {
        try {
            updateVPCounterToggle(messageName, messageData, message, this);
        } catch (e) {
            console.log('Error while updating VP counter toggle');
            console.log(e.message);
        } finally {
            // Process server message like normal
            this.onIncomingMessage_orig.apply(this, arguments);
        }
    };
};
